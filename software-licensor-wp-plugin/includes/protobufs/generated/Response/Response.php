<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: response.proto

namespace Response;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * An API response from the service.
 * To decrypt `data`, you will need to use the same ECDH private key 
 * and ECDH public key that was used to encrypt the `data` field of 
 * the request.
 * 
 * There will be a signature stored in the `Signature` header, which is 
 * computed from a hash of this encoded structure.
 *
 * Generated from protobuf message <code>response.Response</code>
 */
class Response extends \Google\Protobuf\Internal\Message
{
    /**
     * Encrypted payload with the nonce prefixed to the encrypted data
     *
     * Generated from protobuf field <code>bytes data = 2;</code>
     */
    protected $data = '';
    /**
     * The protobuf-encoded key information for the client to use for their next 
     * request
     *
     * Generated from protobuf field <code>.response.EcdhKey next_ecdh_key = 5;</code>
     */
    protected $next_ecdh_key = null;
    /**
     * the timestamp, in seconds since UNIX_EPOCH
     *
     * Generated from protobuf field <code>uint64 timestamp = 6;</code>
     */
    protected $timestamp = 0;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $data
     *           Encrypted payload with the nonce prefixed to the encrypted data
     *     @type \Response\EcdhKey $next_ecdh_key
     *           The protobuf-encoded key information for the client to use for their next 
     *           request
     *     @type int|string $timestamp
     *           the timestamp, in seconds since UNIX_EPOCH
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Response::initOnce();
        parent::__construct($data);
    }

    /**
     * Encrypted payload with the nonce prefixed to the encrypted data
     *
     * Generated from protobuf field <code>bytes data = 2;</code>
     * @return string
     */
    public function getData()
    {
        return $this->data;
    }

    /**
     * Encrypted payload with the nonce prefixed to the encrypted data
     *
     * Generated from protobuf field <code>bytes data = 2;</code>
     * @param string $var
     * @return $this
     */
    public function setData($var)
    {
        GPBUtil::checkString($var, False);
        $this->data = $var;

        return $this;
    }

    /**
     * The protobuf-encoded key information for the client to use for their next 
     * request
     *
     * Generated from protobuf field <code>.response.EcdhKey next_ecdh_key = 5;</code>
     * @return \Response\EcdhKey|null
     */
    public function getNextEcdhKey()
    {
        return $this->next_ecdh_key;
    }

    public function hasNextEcdhKey()
    {
        return isset($this->next_ecdh_key);
    }

    public function clearNextEcdhKey()
    {
        unset($this->next_ecdh_key);
    }

    /**
     * The protobuf-encoded key information for the client to use for their next 
     * request
     *
     * Generated from protobuf field <code>.response.EcdhKey next_ecdh_key = 5;</code>
     * @param \Response\EcdhKey $var
     * @return $this
     */
    public function setNextEcdhKey($var)
    {
        GPBUtil::checkMessage($var, \Response\EcdhKey::class);
        $this->next_ecdh_key = $var;

        return $this;
    }

    /**
     * the timestamp, in seconds since UNIX_EPOCH
     *
     * Generated from protobuf field <code>uint64 timestamp = 6;</code>
     * @return int|string
     */
    public function getTimestamp()
    {
        return $this->timestamp;
    }

    /**
     * the timestamp, in seconds since UNIX_EPOCH
     *
     * Generated from protobuf field <code>uint64 timestamp = 6;</code>
     * @param int|string $var
     * @return $this
     */
    public function setTimestamp($var)
    {
        GPBUtil::checkUint64($var);
        $this->timestamp = $var;

        return $this;
    }

}

