<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: regenerate_license_code.proto

namespace Regenerate_license_code;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Regenerates a user's license code, removing all online machines 
 * from their license.
 * 
 * Each user can only do this once every fortnight.
 * This is a bit more efficient than `deactivate_machines`, as we 
 * do not need to store every machine that needs to be removed. We 
 * will need to write extra items to the database and remove some 
 * extra items from the database, but it is better to do 2 writes 
 * than it is to store an unknown amount of data in each item that 
 * we need to remove machines from, which could result in larger reads
 * and writes for up to a year after machines are deactivated.
 * A GetLicenseResponse is sent as the response for this.
 *
 * Generated from protobuf message <code>regenerate_license_code.RegenerateLicenseCodeRequest</code>
 */
class RegenerateLicenseCodeRequest extends \Google\Protobuf\Internal\Message
{
    /**
     * Generated from protobuf field <code>string user_id = 1;</code>
     */
    protected $user_id = '';

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $user_id
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\RegenerateLicenseCode::initOnce();
        parent::__construct($data);
    }

    /**
     * Generated from protobuf field <code>string user_id = 1;</code>
     * @return string
     */
    public function getUserId()
    {
        return $this->user_id;
    }

    /**
     * Generated from protobuf field <code>string user_id = 1;</code>
     * @param string $var
     * @return $this
     */
    public function setUserId($var)
    {
        GPBUtil::checkString($var, True);
        $this->user_id = $var;

        return $this;
    }

}

