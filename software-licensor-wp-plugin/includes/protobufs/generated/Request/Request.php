<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: request.proto

namespace Request;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * An API request to the Service.
 *
 * Generated from protobuf message <code>request.Request</code>
 */
class Request extends \Google\Protobuf\Internal\Message
{
    /**
     * this value allows the client to decide which symmetric encryption 
     * algorithm will be used for the request and response. The server may 
     * reject the request if the value here is unacceptable.
     *
     * Generated from protobuf field <code>string symmetric_algorithm = 1;</code>
     */
    protected $symmetric_algorithm = '';
    /**
     * the client's ID, or their desired prefix for their ID based on whether 
     * this is the initial handshake or not
     *
     * Generated from protobuf field <code>string client_id = 2;</code>
     */
    protected $client_id = '';
    /**
     * Encrypted payload with the nonce prefixed to the encrypted data
     *
     * Generated from protobuf field <code>bytes data = 3;</code>
     */
    protected $data = '';
    /**
     * Information to decrypt the request
     *
     * Generated from protobuf field <code>.request.DecryptInfo decryption_info = 4;</code>
     */
    protected $decryption_info = null;
    /**
     * The ECDSA key ID that the server will use to sign its response
     *
     * Generated from protobuf field <code>bytes server_ecdsa_key_id = 5;</code>
     */
    protected $server_ecdsa_key_id = '';
    /**
     * the timestamp, in seconds since UNIX_EPOCH
     *
     * Generated from protobuf field <code>uint64 timestamp = 6;</code>
     */
    protected $timestamp = 0;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $symmetric_algorithm
     *           this value allows the client to decide which symmetric encryption 
     *           algorithm will be used for the request and response. The server may 
     *           reject the request if the value here is unacceptable.
     *     @type string $client_id
     *           the client's ID, or their desired prefix for their ID based on whether 
     *           this is the initial handshake or not
     *     @type string $data
     *           Encrypted payload with the nonce prefixed to the encrypted data
     *     @type \Request\DecryptInfo $decryption_info
     *           Information to decrypt the request
     *     @type string $server_ecdsa_key_id
     *           The ECDSA key ID that the server will use to sign its response
     *     @type int|string $timestamp
     *           the timestamp, in seconds since UNIX_EPOCH
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Request::initOnce();
        parent::__construct($data);
    }

    /**
     * this value allows the client to decide which symmetric encryption 
     * algorithm will be used for the request and response. The server may 
     * reject the request if the value here is unacceptable.
     *
     * Generated from protobuf field <code>string symmetric_algorithm = 1;</code>
     * @return string
     */
    public function getSymmetricAlgorithm()
    {
        return $this->symmetric_algorithm;
    }

    /**
     * this value allows the client to decide which symmetric encryption 
     * algorithm will be used for the request and response. The server may 
     * reject the request if the value here is unacceptable.
     *
     * Generated from protobuf field <code>string symmetric_algorithm = 1;</code>
     * @param string $var
     * @return $this
     */
    public function setSymmetricAlgorithm($var)
    {
        GPBUtil::checkString($var, True);
        $this->symmetric_algorithm = $var;

        return $this;
    }

    /**
     * the client's ID, or their desired prefix for their ID based on whether 
     * this is the initial handshake or not
     *
     * Generated from protobuf field <code>string client_id = 2;</code>
     * @return string
     */
    public function getClientId()
    {
        return $this->client_id;
    }

    /**
     * the client's ID, or their desired prefix for their ID based on whether 
     * this is the initial handshake or not
     *
     * Generated from protobuf field <code>string client_id = 2;</code>
     * @param string $var
     * @return $this
     */
    public function setClientId($var)
    {
        GPBUtil::checkString($var, True);
        $this->client_id = $var;

        return $this;
    }

    /**
     * Encrypted payload with the nonce prefixed to the encrypted data
     *
     * Generated from protobuf field <code>bytes data = 3;</code>
     * @return string
     */
    public function getData()
    {
        return $this->data;
    }

    /**
     * Encrypted payload with the nonce prefixed to the encrypted data
     *
     * Generated from protobuf field <code>bytes data = 3;</code>
     * @param string $var
     * @return $this
     */
    public function setData($var)
    {
        GPBUtil::checkString($var, False);
        $this->data = $var;

        return $this;
    }

    /**
     * Information to decrypt the request
     *
     * Generated from protobuf field <code>.request.DecryptInfo decryption_info = 4;</code>
     * @return \Request\DecryptInfo|null
     */
    public function getDecryptionInfo()
    {
        return $this->decryption_info;
    }

    public function hasDecryptionInfo()
    {
        return isset($this->decryption_info);
    }

    public function clearDecryptionInfo()
    {
        unset($this->decryption_info);
    }

    /**
     * Information to decrypt the request
     *
     * Generated from protobuf field <code>.request.DecryptInfo decryption_info = 4;</code>
     * @param \Request\DecryptInfo $var
     * @return $this
     */
    public function setDecryptionInfo($var)
    {
        GPBUtil::checkMessage($var, \Request\DecryptInfo::class);
        $this->decryption_info = $var;

        return $this;
    }

    /**
     * The ECDSA key ID that the server will use to sign its response
     *
     * Generated from protobuf field <code>bytes server_ecdsa_key_id = 5;</code>
     * @return string
     */
    public function getServerEcdsaKeyId()
    {
        return $this->server_ecdsa_key_id;
    }

    /**
     * The ECDSA key ID that the server will use to sign its response
     *
     * Generated from protobuf field <code>bytes server_ecdsa_key_id = 5;</code>
     * @param string $var
     * @return $this
     */
    public function setServerEcdsaKeyId($var)
    {
        GPBUtil::checkString($var, False);
        $this->server_ecdsa_key_id = $var;

        return $this;
    }

    /**
     * the timestamp, in seconds since UNIX_EPOCH
     *
     * Generated from protobuf field <code>uint64 timestamp = 6;</code>
     * @return int|string
     */
    public function getTimestamp()
    {
        return $this->timestamp;
    }

    /**
     * the timestamp, in seconds since UNIX_EPOCH
     *
     * Generated from protobuf field <code>uint64 timestamp = 6;</code>
     * @param int|string $var
     * @return $this
     */
    public function setTimestamp($var)
    {
        GPBUtil::checkUint64($var);
        $this->timestamp = $var;

        return $this;
    }

}

